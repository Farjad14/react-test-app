{"version":3,"sources":["components/messages.js","components/top-section/index.js","components/search-component/index.js","components/form-component/styles.js","components/form-component/index.js","components/column-component/index.js","components/index.js","App.js","serviceWorker.js","index.js"],"names":["mainTitle","id","description","defaultMessage","formTitle","enterItemInput","chooseColumnButton","addItemBtn","searchItemTitle","searchPlaceHolder","columnOneText","columnTwoText","StyledMainTitle","styled","span","StyledDescription","MainTitle","messages","Description","StyledSearchComponent","div","StyledSearchText","SearchStyledInput","input","SearchComponent","injectIntl","searchTerm","handleChange","intl","type","placeholder","formatMessage","value","onChange","FormSection","form","ChooseColumnInput","select","EnterItemInput","AddItemBtn","FormComponent","addTodo","React","useState","setValue","column","setColumn","onSubmit","e","preventDefault","uuid","uid","target","msgs","TableWrapper","ColumnTitle","ColumnSection","StyledList","ColumnComponent","todos","removeTodo","list","Object","keys","reduce","acc","currCol","filtered","filter","item","text","toLowerCase","includes","items","map","index","key","todo","i","data-automation","onClick","TableTitle","SecondaryWrapper","Wrapper","TableTitleWrapper","TableComponent","col1","col2","setTodos","setSearchTerm","col","newTodos","event","values","findIndex","splice","itemIndex","MainWrapper","App","Boolean","window","location","hostname","match","ReactDOM","hydrate","StrictMode","locale","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c95915c2.chunk.js","sourcesContent":["export default {\n  mainTitle: {\n    id: \"main.title.text\",\n    description: \"main app title\",\n    defaultMessage: \"Marvelous!\"\n  },\n  description: {\n    id: \"main.description.text\",\n    description: \"main app description\",\n    defaultMessage:\n      \"Lorem Ipsum is simply dummy text of the printing and typesetting industry Lorem Ipsum has been the industry's standard dummy text ever since.\"\n  },\n  formTitle: {\n    id: \"form.title.text\",\n    description: \"form app title\",\n    defaultMessage: \"ADD AN ITEM\"\n  },\n  enterItemInput: {\n    id: \"form.enterItemInput.btn\",\n    description: \"enterItemInput\",\n    defaultMessage: \"ENTER ITEM\"\n  },\n  chooseColumnButton: {\n    id: \"form.chooseColumnButton.btn\",\n    description: \"chooseColumnButton\",\n    defaultMessage: \"CHOOSE COLUMN\"\n  },\n  addItemBtn: {\n    id: \"form.addItemBtn.btn\",\n    description: \"addItemBtn\",\n    defaultMessage: \"ADD ITEM\"\n  },\n  searchItemTitle: {\n    id: \"form.searchItemTitle.text\",\n    description: \"searchItemTitle\",\n    defaultMessage: \"SEARCH AN ITEM\"\n  },\n  searchPlaceHolder: {\n    id: \"form.search.placeholder\",\n    description: \"searchItemTitle\",\n    defaultMessage: \"SEARCH\"\n  },\n  columnOneText: {\n    id: \"form.columnOneText.text\",\n    description: \"columnOneText\",\n    defaultMessage: \"COLUMN 1\"\n  },\n  columnTwoText: {\n    id: \"form.columnTwoText.text\",\n    description: \"columnTwoText\",\n    defaultMessage: \"COLUMN 2\"\n  }\n};\n","import styled from \"@emotion/styled\";\nimport { FormattedMessage } from \"react-intl\";\nimport React from \"react\";\nimport messages from \"../messages\";\n\nconst StyledMainTitle = styled.span`\n  display: flex;\n  color: white;\n  font-size: 50px;\n  font-style: italic;\n  font-family: Merriweather, serif;\n  @media (max-width: 800px) {\n    font-size: 36px;\n  }\n`;\n\nconst StyledDescription = styled.span`\n  display: flex;\n  color: #8adfd6;\n  font-size: 20px;\n  margin: 10px 0 60px 0;\n  width: 55%;\n  @media (max-width: 800px) {\n    width: 100%;\n    font-size: 16px;\n  }\n`;\n\nexport const MainTitle = () => (\n  <StyledMainTitle>\n    <FormattedMessage {...messages.mainTitle} />\n  </StyledMainTitle>\n);\n\nexport const Description = () => (\n  <StyledDescription>\n    <FormattedMessage {...messages.description} />\n  </StyledDescription>\n);\n","\nimport styled from \"@emotion/styled\";\nimport { FormattedMessage, injectIntl } from \"react-intl\";\nimport React from \"react\";\nimport messages from \"../messages\";\n\nconst StyledSearchComponent = styled.div`\n  display: flex;\n  flex-direction: column;\n  color: white;\n  margin-top: 40px;\n`;\n\nconst StyledSearchText = styled.span`\n  font-size: 14px;\n  font-weight: bold;\n`;\n\nconst SearchStyledInput = styled.input`\n  background: #9ba1ab;\n  color: white;\n  padding: 10px;\n  margin-top: 5px;\n  border: white 2px solid;\n  ::placeholder {\n    /* Chrome, Firefox, Opera, Safari 10.1+ */\n    color: white;\n    opacity: 0.7; /* Firefox */\n  }\n  @media (max-width: 800px) {\n    margin: 10px 0 30px 0;\n  }\n`;\n\nexport const SearchComponent = injectIntl(\n    ({ searchTerm, handleChange, intl }) => (\n      <StyledSearchComponent>\n        <StyledSearchText>\n          <FormattedMessage {...messages.searchItemTitle} />\n        </StyledSearchText>\n        <SearchStyledInput\n          type=\"text\"\n          placeholder={intl.formatMessage(messages.searchPlaceHolder)}\n          value={searchTerm}\n          onChange={handleChange}\n        />\n      </StyledSearchComponent>\n    )\n  );","import styled from \"@emotion/styled\";\n\nexport const FormSection = styled.form`\n  display: flex;\n  width: 100%;\n  flex-direction: column;\n  margin-right: 10px;\n  width: 100%;\n  flex-shrink: 2;\n  @media (max-width: 800px) {\n    margin-right: 0px;\n  }\n`;\n\nexport const ChooseColumnInput = styled.select`\n  display: flex;\n  justify-content: center;\n  background: #9ba1ab;\n  color: rgb(255, 255, 255, 0.7);\n  padding: 10px;\n  margin: 10px 0 140px 0;\n  border: white 2px solid;\n  @media (max-width: 800px) {\n    margin: 10px 0 20px 0;\n  }\n`;\n\nexport const EnterItemInput = styled.input`\n  display: flex;\n  justify-content: center;\n  background: #9ba1ab;\n  color: white;\n  padding: 10px;\n  margin: 0 0 10px 0;\n  border: white 2px solid;\n  ::placeholder {\n    /* Chrome, Firefox, Opera, Safari 10.1+ */\n    color: white;\n    opacity: 0.7; /* Firefox */\n  }\n`;\n\nexport const AddItemBtn = styled.input`\n  display: flex;\n  justify-content: center;\n  background: #79818f;\n  color: white;\n  padding: 10px;\n  width: 100%;\n  margin: 10px 0 10px 0;\n  border: white 2px solid;\n`;","\nimport { FormattedMessage, injectIntl } from \"react-intl\";\nimport React from \"react\";\nimport { SearchComponent } from \"../search-component\";\nimport messages from \"../messages\";\nimport { v4 as uid } from \"uuid\";\nimport {FormSection, ChooseColumnInput, EnterItemInput, AddItemBtn } from \"./styles\";\n\n\nexport const FormComponent = injectIntl(\n    ({ addTodo, intl, searchTerm, handleChange }) => {\n      const [value, setValue] = React.useState(\"\");\n      const [column, setColumn] = React.useState(\"\");\n  \n      const handleSubmit = e => {\n        e.preventDefault();\n        if (!value) return;\n        if (!column) return;\n        const uuid = uid();\n        addTodo(value, column, uuid);\n        setValue(\"\");\n        setColumn(\"\");\n      };\n  \n      const handleSelectChange = e => {\n        setColumn(e.target.value);\n      };\n  \n      return (\n        <FormSection onSubmit={handleSubmit}>\n          <EnterItemInput\n            type=\"text\"\n            value={value}\n            onChange={e => setValue(e.target.value)}\n            placeholder={intl.formatMessage(messages.enterItemInput)}\n          />\n          <ChooseColumnInput onChange={handleSelectChange} value={column}>\n            <FormattedMessage {...messages.chooseColumnButton}>\n              {msgs => <option value=\"\">{msgs}</option>}\n            </FormattedMessage>\n            <FormattedMessage {...messages.columnOneText}>\n              {msgs => <option value=\"col1\">{msgs}</option>}\n            </FormattedMessage>\n            <FormattedMessage {...messages.columnTwoText}>\n              {msgs => <option value=\"col2\">{msgs}</option>}\n            </FormattedMessage>\n          </ChooseColumnInput>\n          <AddItemBtn\n            type=\"submit\"\n            value={intl.formatMessage(messages.addItemBtn)}\n          />\n          <SearchComponent searchTerm={searchTerm} handleChange={handleChange} />\n        </FormSection>\n      );\n    }\n  );","import styled from \"@emotion/styled\";\nimport { FormattedMessage } from \"react-intl\";\nimport React from \"react\";\nimport messages from \"../messages\";\n\nconst TableWrapper = styled.div`\n  display: flex;\n  flex-direction: coloumn;\n  width: 100%;\n  border: 5px solid white;\n  font-size: 16px;\n  flex-shrink: 1;\n`;\n\nconst ColumnTitle = styled.div`\n  display: flex;\n  justify-content: center;\n  background-image: linear-gradient(white, #758296, #4c586c);\n  color: white;\n  padding: 10px;\n`;\n\nconst ColumnSection = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  :first-child {\n    border-right: 5px solid white;\n  }\n`;\n\nconst StyledList = styled.span`\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  background: #eeeeef;\n  :nth-child(2n-1) {\n    background: #bbc0c7;\n  }\n`;\n\nexport const ColumnComponent = ({ todos, removeTodo, searchTerm }) => {\n    const list = Object.keys(todos).reduce((acc, currCol) => {\n      const filtered = todos[currCol].filter(item =>\n        item.text.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n      return {\n        ...acc,\n        [currCol]: filtered\n      };\n    }, {});\n    const items = searchTerm !== \"\" ? list : todos;\n    const columnHeader = i =>\n      i === 0 ? messages.columnOneText : messages.columnTwoText;\n    const keys = Object.keys(items);\n    return (\n      <TableWrapper>\n        {keys.map((column, index) => (\n          <ColumnSection key={index}>\n            <ColumnTitle>\n              <FormattedMessage {...columnHeader(index)} />\n            </ColumnTitle>\n            {items[column].map((todo, i) => (\n              <StyledList key={i}>\n                {todo.text}\n                <button\n                  data-automation={todo.uid}\n                  onClick={() => removeTodo(todo, column)}\n                >\n                  x\n                </button>\n              </StyledList>\n            ))}\n          </ColumnSection>\n        ))}\n      </TableWrapper>\n    );\n  };","import styled from \"@emotion/styled\";\nimport { FormattedMessage } from \"react-intl\";\nimport React from \"react\";\nimport messages from \"./messages\";\nimport { FormComponent } from \"./form-component\";\nimport { ColumnComponent } from \"./column-component\";\n\nconst TableTitle = styled.div`\n  display: flex;\n  justify-content: center;\n  background-image: linear-gradient(white, #95a2b3, #818fa2);\n  color: white;\n  padding: 10px;\n  margin: 10px 0 10px 0;\n`;\n\nconst SecondaryWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  @media (max-width: 800px) {\n    flex-wrap: wrap;\n  }\n`;\n\nconst Wrapper = styled.div`\n  font-size: 14px;\n`;\n\n\nexport const TableTitleWrapper = () => (\n  <TableTitle>\n    <FormattedMessage {...messages.formTitle} />\n  </TableTitle>\n);\n\nexport const TableComponent = () => {\n  const [todos, setTodos] = React.useState({\n    col1: [\n      { uid: \"uuidv4\", text: \"Farjad\" },\n      { uid: \"uuidv224\", text: \"Anna\" }\n    ],\n    col2: [{ uid: \"uuidv4\", text: \"H8tch\" }]\n  });\n\n  const addTodo = (text, col, uid) => {\n    const newTodos = {\n      ...todos,\n      [col]: [...todos[col], { text, uid, col }]\n    };\n    setTodos(newTodos);\n  };\n\n  const removeTodo = (item, col) => {\n    const values = todos[col];\n    const index = values.findIndex(i => i.uid === item.uid);\n    values.splice(index, 1);\n    const itemIndex = {\n      ...todos,\n      [col]: values\n    };\n    setTodos(itemIndex);\n  };\n  const [searchTerm, setSearchTerm] = React.useState(\"\");\n  const handleSearchChange = event => {\n    setSearchTerm(event.target.value);\n  };\n\n  return (\n    <Wrapper>\n      <TableTitleWrapper />\n      <SecondaryWrapper>\n        <FormComponent\n          addTodo={addTodo}\n          searchTerm={searchTerm}\n          handleChange={handleSearchChange}\n        />\n        <ColumnComponent\n          todos={todos}\n          searchTerm={searchTerm}\n          removeTodo={removeTodo}\n        />\n      </SecondaryWrapper>\n    </Wrapper>\n  );\n};\n\n\n\n\n","import styled from \"@emotion/styled\";\nimport React from \"react\";\nimport { MainTitle, Description } from \"./components/top-section\";\nimport { TableComponent } from \"./components/\";\n\n\nconst MainWrapper = styled.div`\npadding: 10%;\n`;\n\nconst App = () => {\n  return (\n    <MainWrapper>\n        <MainTitle />\n        <Description />\n        <TableComponent />\n    </MainWrapper>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {IntlProvider} from \"react-intl\";\n\nReactDOM.hydrate(<React.StrictMode>\n  <IntlProvider locale='en'>\n    <App />\n  </IntlProvider>\n</React.StrictMode>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}